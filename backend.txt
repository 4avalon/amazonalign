// backend\config\db.js

const { Client } = require('pg'); // Importação do PostgreSQL
const dotenv = require('dotenv');

// Carregar variáveis de ambiente
dotenv.config();

const client = new Client({
  connectionString: process.env.DATABASE_URL,
});

client.connect()
  .then(() => console.log('✅ Conectado ao PostgreSQL com sucesso!'))
  .catch(err => console.error('❌ Erro ao conectar ao PostgreSQL:', err));

module.exports = client;



// backend\controllers\admin\adminDentistaController.js

// controllers/admin/adminDentistaController.js
const client = require("../../config/db");

// 1) Listar dentistas para o Dashboard Admin
async function listarDentistasDashboard(req, res) {
    console.log("📋 Requisição: Listar dentistas para o Dashboard Admin");
    try {
        const result = await client.query(`
            SELECT 
                d.id, 
                d.nome, 
                d.is_admin::BOOLEAN AS is_admin,
                d.is_verified::BOOLEAN AS is_verified,
                COALESCE(COUNT(p.id), 0) AS total_pedidos,
                COALESCE(SUM(CASE WHEN p.status NOT IN ('Concluído', 'Cancelado') THEN 1 ELSE 0 END), 0) AS pedidos_abertos
            FROM dentistas d
            LEFT JOIN pedidos p ON d.id = p.dentista_id
            GROUP BY d.id
            ORDER BY d.id ASC
        `);
        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao listar dentistas para o dashboard:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
}

// 2) Detalhes de um dentista específico
async function obterDetalhesDentista(req, res) {
    const { id } = req.params;
    console.log(`🔍 Buscando detalhes do dentista ID=${id}`);
    try {
        const result = await client.query(`
            SELECT d.id, d.nome, d.email, d.telefone, d.is_admin, d.is_verified, 
                COUNT(p.id) AS total_pedidos,
                COUNT(CASE WHEN p.status NOT IN ('Concluído', 'Cancelado') THEN 1 END) AS pedidos_abertos
            FROM dentistas d
            LEFT JOIN pedidos p ON d.id = p.dentista_id
            WHERE d.id = $1
            GROUP BY d.id
        `, [id]);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        res.status(200).json(result.rows[0]);
    } catch (error) {
        console.error("❌ Erro ao buscar detalhes do dentista:", error);
        res.status(500).json({ message: "Erro ao buscar detalhes do dentista." });
    }
}

// 3) Alternar Status de Administrador
async function alternarAdmin(req, res) {
    const { id } = req.params;
    console.log(`🔄 Alternando status de Admin para dentista ID=${id}`);
    try {
        const result = await client.query("SELECT is_admin FROM dentistas WHERE id = $1", [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        const novoStatus = !result.rows[0].is_admin;
        const updateResult = await client.query(
            "UPDATE dentistas SET is_admin = $1 WHERE id = $2 RETURNING is_admin",
            [novoStatus, id]
        );
        res.status(200).json({ message: "Status de Administrador atualizado com sucesso!", is_admin: updateResult.rows[0].is_admin });
    } catch (err) {
        console.error("❌ Erro ao alternar status de Admin:", err);
        res.status(500).json({ message: "Erro ao atualizar status de administrador." });
    }
}

// 4) Alternar Status de Credenciado
async function alternarCredenciado(req, res) {
    const { id } = req.params;
    console.log(`🔄 Alternando status de Credenciado para dentista ID=${id}`);
    try {
        const result = await client.query("SELECT is_verified FROM dentistas WHERE id = $1", [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        const novoStatus = !result.rows[0].is_verified;
        const updateResult = await client.query(
            "UPDATE dentistas SET is_verified = $1 WHERE id = $2 RETURNING is_verified",
            [novoStatus, id]
        );
        res.status(200).json({ message: "Status de Credenciado atualizado com sucesso!", is_verified: updateResult.rows[0].is_verified });
    } catch (err) {
        console.error("❌ Erro ao alternar status de Credenciado:", err);
        res.status(500).json({ message: "Erro ao atualizar status de credenciamento." });
    }
}

module.exports = {
    listarDentistasDashboard,
    obterDetalhesDentista,
    alternarAdmin,
    alternarCredenciado
};



// backend\controllers\admin\adminEstatisticasController.js

// controllers/admin/adminEstatisticasController.js
const client = require("../../config/db");

async function obterEstatisticasAdmin(req, res) {
    console.log("📊 Obtendo estatísticas do dashboard Admin...");
    try {
        const result = await client.query(`
            SELECT 
                (SELECT COUNT(*) FROM dentistas) AS total_dentistas,
                (SELECT COUNT(*) FROM pacientes) AS total_pacientes,
                (SELECT COUNT(*) FROM pedidos) AS total_pedidos,
                (SELECT COUNT(*) FROM pedidos WHERE status NOT IN ('Concluído', 'Cancelado')) AS pedidos_abertos,
                (SELECT COUNT(*) FROM pedidos WHERE status = 'Concluído') AS pedidos_finalizados,
                (SELECT COUNT(*) FROM pedidos WHERE status = 'Cancelado') AS pedidos_cancelados,
                (SELECT COUNT(*) FROM dentistas WHERE is_verified = TRUE) AS total_dentistas_credenciados,
                (SELECT COUNT(*) FROM pedidos WHERE created_at >= NOW() - INTERVAL '7 days') AS pedidos_ultimos_7_dias,
                (SELECT COUNT(*) FROM dentistas WHERE is_verified = TRUE AND created_at >= NOW() - INTERVAL '7 days') AS dentistas_credenciados_7_dias,
                (SELECT COUNT(*) FROM pedidos WHERE DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE)) AS pedidos_mes_atual,
                (SELECT COUNT(*) FROM dentistas WHERE is_verified = TRUE AND DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE)) AS dentistas_credenciados_mes_atual
        `);
        res.status(200).json(result.rows[0]);
    } catch (error) {
        console.error("❌ Erro ao buscar estatísticas do Admin:", error);
        res.status(500).json({ message: "Erro ao buscar estatísticas do Admin." });
    }
}

module.exports = {
    obterEstatisticasAdmin
};



// backend\controllers\admin\adminPedidoController.js

 console.log(`🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄🔄'`);
// controllers/admin/adminPedidoController.js
const client = require("../../config/db");

// Lista todos os pedidos para o Dashboard Admin
async function listarPedidosDashboard(req, res) {
    console.log("📦 Requisição: Listar pedidos para o Dashboard Admin");
    try {
        const result = await client.query(`
            SELECT 
                p.id, 
                p.paciente_id, 
                CONCAT(pa.nome, ' (ID: ', pa.id, ')') AS paciente_nome, 
                p.dentista_id, 
                CONCAT(d.nome, ' (ID: ', d.id, ')') AS dentista_nome, 
                p.data_pagamento, 
                p.video_conferencia, 
                p.arquivo_3d, 
                p.ficha_tecnica, 
                p.status, 
                p.created_at
            FROM pedidos p
            JOIN dentistas d ON p.dentista_id = d.id
            JOIN pacientes pa ON p.paciente_id = pa.id
            ORDER BY p.created_at DESC
        `);
        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao listar pedidos para o dashboard:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
}

// Alterar Status de um Pedido
async function alterarStatusPedido(req, res) {
    const { id } = req.params;
    const { status } = req.body;
    console.log(`🔄 Atualizando status do pedido ID=${id} para '${status}'`);

    const statusPermitidos = ["Pendente", "Em andamento", "Aprovado", "Concluído", "Cancelado"];
    if (!statusPermitidos.includes(status)) {
        return res.status(400).json({ message: `Status inválido. Os status permitidos são: ${statusPermitidos.join(", ")}` });
    }

    try {
        const pedidoExiste = await client.query("SELECT id FROM pedidos WHERE id = $1", [id]);
        if (pedidoExiste.rows.length === 0) {
            return res.status(404).json({ message: "Pedido não encontrado." });
        }
        await client.query(
            "UPDATE pedidos SET status = $1 WHERE id = $2 RETURNING id, dentista_id, paciente_id, status",
            [status, id]
        );
        console.log(`✅ Status do pedido ID=${id} atualizado para '${status}'`);
        res.status(200).json({ message: "Status do pedido atualizado com sucesso!", pedido: { id, status } });
    } catch (error) {
        console.error("❌ Erro ao atualizar status do pedido:", error);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
}

module.exports = {
    listarPedidosDashboard,
    alterarStatusPedido
};




// backend\controllers\dashboardAdminController.js

// controllers/dashboardAdminController.js
const {
  listarDentistasDashboard,
  obterDetalhesDentista,
  alternarAdmin,
  alternarCredenciado
} = require("./admin/adminDentistaController");

const {
  listarPedidosDashboard,
  alterarStatusPedido
} = require("./admin/adminPedidoController");

const {
  obterEstatisticasAdmin
} = require("./admin/adminEstatisticasController");

// Reexporta tudo em um só objeto
module.exports = {
  listarDentistasDashboard,
  obterDetalhesDentista,
  listarPedidosDashboard,
  alterarStatusPedido,
  obterEstatisticasAdmin,
  alternarAdmin,
  alternarCredenciado
};



// backend\controllers\dashboardDentistaController.js

const { listarPacientesDashboard, obterDetalhesPaciente } = require("./dentista/dentistaPacienteController");
const { listarPedidosDentista } = require("./dentista/dentistaPedidoController");

module.exports = {
  listarPacientesDashboard,
  obterDetalhesPaciente,
  listarPedidosDentista
};



// backend\controllers\dentista\dentistaDentistaController.js




// backend\controllers\dentista\dentistaPacienteController.js

const client = require("../../config/db");

// Lista os pacientes vinculados ao dentista logado

async function listarPacientesDashboard(req, res) {
  console.log("📋 Requisição: Listar pacientes para o Dashboard do Dentista");

  try {
    // 🔹 1️⃣ Buscar os dados do dentista logado
    const { rows: [dentista] } = await client.query(
      `SELECT id, nome, TO_CHAR(data_nascimento, 'DD/MM/YYYY') AS data_nascimento, sexo 
       FROM dentistas WHERE id = $1`,
      [req.usuario.id]
    );

    if (!dentista) {
      return res.status(403).json({ message: "Dentista não encontrado." });
    }

    console.log("🦷 Dentista logado:", dentista);

    // 🔹 2️⃣ Buscar pacientes do dentista logado
    const result = await client.query(
      `SELECT 
          p.id, 
          p.nome, 
          TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento,
          p.sexo, 
          COUNT(pe.id) AS pedidos_abertos
      FROM pacientes p
      LEFT JOIN pedidos pe 
          ON p.id = pe.paciente_id 
          AND pe.status NOT IN ('cancelado', 'entregue')
      WHERE p.dentista_id = $1
      GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
      ORDER BY p.nome ASC;`,
      [req.usuario.id]
    );

    console.log("✅ Pacientes do banco:", JSON.stringify(result.rows, null, 2));

    // 🔹 3️⃣ Permitir headers personalizados para o navegador
    res.set({
      "Access-Control-Expose-Headers": "X-Dentista-ID, X-Dentista-Nome, X-Dentista-Data-Nascimento, X-Dentista-Sexo",
      "X-Dentista-ID": dentista.id,
      "X-Dentista-Nome": dentista.nome,
      "X-Dentista-Data-Nascimento": dentista.data_nascimento,
      "X-Dentista-Sexo": dentista.sexo
    });

    // 🔹 4️⃣ Enviar resposta com os pacientes
    res.status(200).json(result.rows);

  } catch (err) {
    console.error("❌ Erro ao listar pacientes:", err);
    res.status(500).json({ message: "Erro interno no servidor.", error: err.message });
  }
}


// Obtém os detalhes de um paciente específico
async function obterDetalhesPaciente(req, res) {
  const { id } = req.params;
  console.log(`🔍 Buscando detalhes do paciente ID=${id} para o Dentista`);

  try {
    // Buscar informações completas do paciente
    const pacienteResult = await client.query(
      `SELECT 
          id, 
          nome, 
          telefone, 
          COALESCE(TO_CHAR(data_nascimento, 'DD/MM/YYYY'), '--') AS data_nascimento, 
          COALESCE(sexo, '--') AS sexo
       FROM pacientes 
       WHERE id = $1 AND dentista_id = $2`,
      [id, req.usuario.id]
    );

    if (pacienteResult.rows.length === 0) {
      return res.status(404).json({ message: "Paciente não encontrado." });
    }

    const paciente = pacienteResult.rows[0];

    // Buscar os pedidos do paciente
    const pedidosResult = await client.query(
      `SELECT 
          id, 
          ficha_tecnica::TEXT, 
          arquivo_3d, 
          status, 
          COALESCE(TO_CHAR(data_pagamento, 'DD/MM/YYYY'), '--') AS data_pagamento
       FROM pedidos 
       WHERE paciente_id = $1
       ORDER BY created_at DESC`,
      [id]
    );

    // Converte ficha_tecnica de JSON string para um objeto válido
    const pedidos = pedidosResult.rows.map(pedido => ({
      id: pedido.id,
      ficha_tecnica: JSON.parse(pedido.ficha_tecnica || "{}"),
      arquivo_3d: pedido.arquivo_3d,
      status: pedido.status,
      data_pagamento: pedido.data_pagamento
    }));

    // Retornar paciente + pedidos
    res.status(200).json({ paciente, pedidos });

  } catch (err) {
    console.error("❌ Erro ao buscar detalhes do paciente:", err);
    res.status(500).json({ message: "Erro interno no servidor.", error: err.message });
  }
}


module.exports = {
  listarPacientesDashboard,
  obterDetalhesPaciente
};



// backend\controllers\dentista\dentistaPedidoController.js

const client = require("../../config/db");

// Lista os pedidos do dentista logado
async function listarPedidosDentista(req, res) {
  console.log("📦 Requisição: Listar pedidos para o Dashboard do Dentista");

  try {
    const result = await client.query(
      `
      SELECT 
        p.id, 
        p.paciente_id,
        COALESCE(pac.nome, 'Paciente Desconhecido') AS paciente_nome,
        COALESCE(TO_CHAR(p.data_pagamento, 'DD/MM/YYYY'), '--') AS data_pagamento,
        COALESCE(p.status, 'Indefinido') AS status,
        COALESCE(p.ficha_tecnica::TEXT, '{}') AS ficha_tecnica,
        COALESCE(p.arquivo_3d, 'Sem arquivo') AS arquivo_3d,
        TO_CHAR(p.created_at, 'DD/MM/YYYY') AS data_criacao,
        COALESCE(d.nome, 'Dentista Desconhecido') AS dentista_nome
      FROM pedidos p
      LEFT JOIN pacientes pac ON pac.id = p.paciente_id
      LEFT JOIN dentistas d ON d.id = p.dentista_id
      WHERE p.dentista_id = $1
      ORDER BY p.created_at DESC
      `,
      [req.usuario.id]
    );

    const pedidos = result.rows.map(pedido => ({
      id: pedido.id,
      paciente_id: pedido.paciente_id,
      paciente_nome: pedido.paciente_nome,
      data_pagamento: pedido.data_pagamento,
      status: pedido.status,
      ficha_tecnica: JSON.parse(pedido.ficha_tecnica), // Converter para objeto
      arquivo_3d: pedido.arquivo_3d,
      data_criacao: pedido.data_criacao,
      dentista_nome: pedido.dentista_nome,
    }));

    console.log("✅ Pedidos retornados:", pedidos);
    res.status(200).json(pedidos);
  } catch (err) {
    console.error("❌ Erro ao listar pedidos:", err);
    res.status(500).json({ message: "Erro interno no servidor.", error: err.message });
  }
}

module.exports = {
  listarPedidosDentista
};



// backend\controllers\dentistaController.js

const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const client = require("../config/db");

const SECRET_KEY = process.env.SECRET_KEY;

// 🔹 Listar todos os dentistas (Apenas ADMIN)
const listarDentistas = async (req, res) => {
    console.log("📋 Requisição: Listar todos os dentistas.");
    try {
        if (!req.usuario.is_admin) {
            return res.status(403).json({ message: "Acesso negado. Apenas administradores podem visualizar dentistas." });
        }

        const result = await client.query("SELECT id, nome, email, telefone, is_admin, is_verified FROM dentistas");
        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao listar dentistas:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Visualizar detalhes de um dentista (ADMIN)
const visualizarDentista = async (req, res) => {
    const { id } = req.params;
    console.log(`🔍 Buscando detalhes do dentista ID=${id}`);

    try {
        const result = await client.query(
            `SELECT d.id, d.nome, d.email, d.telefone, d.is_verified, 
            COUNT(p.id) AS total_pedidos,
            COUNT(CASE WHEN p.status NOT IN ('Concluído', 'Cancelado') THEN 1 END) AS pedidos_abertos
            FROM dentistas d
            LEFT JOIN pedidos p ON d.id = p.dentista_id
            WHERE d.id = $1
            GROUP BY d.id`,
            [id]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }

        res.status(200).json(result.rows[0]);
    } catch (error) {
        console.error("❌ Erro ao buscar dentista:", error);
        res.status(500).json({ message: "Erro ao buscar dentista." });
    }
};

// 🔹 Adicionar um novo dentista (ADMIN)
const adicionarDentista = async (req, res) => {
    const { nome, email, telefone, senha } = req.body;
    console.log("➕ Requisição: Adicionar dentista.", req.body);

    try {
        // 🔹 Hash da senha (mantendo comentado para testes rápidos)
        const senhaHash = await bcrypt.hash(senha, 10);

        const result = await client.query(
            "INSERT INTO dentistas (nome, email, telefone, senha, is_verified) VALUES ($1, $2, $3, $4, $5) RETURNING id, nome, email, telefone, is_verified",
            [nome, email, telefone, senhaHash, false]
        );

        res.status(201).json({ message: "Dentista cadastrado com sucesso!", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao adicionar dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Alterar dados do dentista (ADMIN)
const alterarDentista = async (req, res) => {
    const { id } = req.params;
    const { nome, telefone, email, senha } = req.body;
    console.log(`✏️ Requisição: Alterar dentista com ID=${id}`);

    try {
        let senhaHash = senha ? await bcrypt.hash(senha, 10) : undefined;

        const result = await client.query(
            "UPDATE dentistas SET nome = $1, telefone = $2, email = $3, senha = COALESCE($4, senha) WHERE id = $5 RETURNING id, nome, email, telefone, is_admin",
            [nome, telefone, email, senhaHash, id]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }

        res.status(200).json({ message: "Dentista atualizado com sucesso.", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao alterar dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Remover um dentista (Apenas ADMIN)
const removerDentista = async (req, res) => {
    if (!req.usuario.is_admin) {
        return res.status(403).json({ message: "Acesso negado. Apenas administradores podem remover dentistas." });
    }
    const { id } = req.params;
    console.log(`🗑️ Requisição: Remover dentista com ID=${id}`);

    try {
        const result = await client.query("DELETE FROM dentistas WHERE id = $1 RETURNING id, nome, email", [id]);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Dentista não encontrado." });
        }

        res.status(200).json({ message: "Dentista removido com sucesso.", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao remover dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

/// 🔹 Login do dentista (ADMIN)
const loginDentista = async (req, res) => {
    const { email, senha } = req.body;
    console.log(`🔑 Requisição: Login com email: ${email}`);

    try {
        const result = await client.query("SELECT * FROM dentistas WHERE LOWER(email) = LOWER($1)", [email.toLowerCase()]);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Email ou senha incorretos." });
        }

        const dentista = result.rows[0];

        // 🔽 Comparação sem bcrypt (Apenas para testes)
        if (senha !== dentista.senha) {
            return res.status(401).json({ message: "Email ou senha incorretos." });
        }

        /**
        // 🔒 Comparação segura com bcrypt (Descomente quando for usar senhas criptografadas)
        const senhaValida = await bcrypt.compare(senha, dentista.senha);
        if (!senhaValida) {
            return res.status(401).json({ message: "Email ou senha incorretos." });
        }
        **/

        const token = jwt.sign(
            { id: dentista.id, email: dentista.email, is_admin: dentista.is_admin, is_verified: dentista.is_verified },
            SECRET_KEY,
            { expiresIn: "2h", algorithm: "HS256" }
        );

        res.status(200).json({ message: "Login bem-sucedido", token, dentista });
    } catch (err) {
        console.error("❌ Erro ao realizar login:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};


module.exports = {
    listarDentistas,
    visualizarDentista,
    adicionarDentista,
    alterarDentista,
    removerDentista,
    loginDentista,
};



// backend\controllers\filtrosController.js

const client = require("../config/db");

// 📌 1️⃣ Filtro por Nome (apenas pacientes do dentista logado)
const filtrarPorNome = async (req, res) => {
    const { query } = req.query;
    const dentistaId = req.usuario.id; 

    try {
        const result = await client.query(
            `SELECT 
                p.id AS paciente_id, 
                p.nome, 
                TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento, 
                p.sexo, 
                COUNT(pe.id) AS pedidos_abertos
             FROM pacientes p
             LEFT JOIN pedidos pe ON p.id = pe.paciente_id
             WHERE p.dentista_id = $1 
             AND ($2 = '' OR LOWER(p.nome) LIKE LOWER($2))
             GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
             ORDER BY p.nome ASC;`,
            [dentistaId, query ? `%${query}%` : '']
        );

        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao buscar pacientes por nome:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 📌 2️⃣ Filtro por Sexo
const filtrarPorSexo = async (req, res) => {
    const { sexo } = req.query;
    const dentistaId = req.usuario.id;

    if (!sexo || !["M", "F", "O"].includes(sexo.toUpperCase())) {
        return res.status(400).json({ message: "Parâmetro 'sexo' inválido. Use 'M', 'F' ou 'O'." });
    }

    try {
        const result = await client.query(
            `SELECT 
                p.id AS paciente_id, 
                p.nome, 
                TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento, 
                p.sexo, 
                COUNT(pe.id) AS pedidos_abertos
             FROM pacientes p
             LEFT JOIN pedidos pe ON p.id = pe.paciente_id
             WHERE p.dentista_id = $1 
             AND p.sexo = $2
             GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
             ORDER BY p.nome ASC;`,
            [dentistaId, sexo.toUpperCase()]
        );

        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao buscar pacientes por sexo:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 📌 3️⃣ Ordenação Alfabética (A-Z ou Z-A)
const ordenarPorNome = async (req, res) => {
    const { ordem } = req.query;
    const dentistaId = req.usuario.id;

    if (!ordem || !["asc", "desc"].includes(ordem.toLowerCase())) {
        return res.status(400).json({ message: "Parâmetro 'ordem' deve ser 'asc' ou 'desc'." });
    }

    try {
        const result = await client.query(
            `SELECT 
                p.id AS paciente_id, 
                p.nome, 
                TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento, 
                p.sexo, 
                COUNT(pe.id) AS pedidos_abertos
             FROM pacientes p
             LEFT JOIN pedidos pe ON p.id = pe.paciente_id
             WHERE p.dentista_id = $1
             GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
             ORDER BY p.nome ${ordem.toUpperCase()};`,
            [dentistaId]
        );

        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao ordenar pacientes por nome:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 📌 4️⃣ Ordenação por Número de Pedidos Abertos (Maior -> Menor)
const ordenarPorPedidos = async (req, res) => {
    const dentistaId = req.usuario.id;

    try {
        const result = await client.query(
            `SELECT 
                p.id AS paciente_id, 
                p.nome, 
                TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento, 
                p.sexo, 
                COUNT(pe.id) AS pedidos_abertos
             FROM pacientes p
             LEFT JOIN pedidos pe ON p.id = pe.paciente_id AND pe.status NOT IN ('cancelado', 'entregue')
             WHERE p.dentista_id = $1
             GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
             ORDER BY pedidos_abertos DESC;`,
            [dentistaId]
        );

        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao ordenar pacientes por pedidos abertos:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 📌 5️⃣ Filtro por Status do Pedido
const filtrarPorStatus = async (req, res) => {
    const { status } = req.query;
    const dentistaId = req.usuario.id;

    if (!status) return res.status(400).json({ message: "Parâmetro 'status' obrigatório." });

    try {
        const result = await client.query(
            `SELECT 
                p.id AS paciente_id, 
                p.nome, 
                TO_CHAR(p.data_nascimento, 'DD/MM/YYYY') AS data_nascimento, 
                p.sexo, 
                COUNT(pe.id) AS pedidos_abertos
             FROM pacientes p
             LEFT JOIN pedidos pe ON p.id = pe.paciente_id
             WHERE p.dentista_id = $1 
             AND pe.status = $2
             GROUP BY p.id, p.nome, p.data_nascimento, p.sexo
             ORDER BY p.nome ASC;`,
            [dentistaId, status]
        );

        res.status(200).json(result.rows);
    } catch (err) {
        console.error("❌ Erro ao buscar pacientes por status:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

module.exports = { 
    filtrarPorNome,
    filtrarPorSexo,
    ordenarPorNome,
    ordenarPorPedidos,
    filtrarPorStatus
};



// backend\controllers\pacienteController.js

const client = require('../config/db'); // Conexão com o banco de dados

// Listar todos os pacientes
const listarPacientes = async (req, res) => {
  console.log('📋 Requisição: Listar todos os pacientes.');
  try {
    const result = await client.query('SELECT * FROM pacientes');
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('❌ Erro ao listar pacientes:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Adicionar um novo paciente
const adicionarPaciente = async (req, res) => {
  const { nome, email, telefone, endereco } = req.body;
  console.log('➕ Requisição: Adicionar paciente.', req.body);

  try {
    const result = await client.query(
      'INSERT INTO pacientes (nome, email, telefone, endereco) VALUES ($1, $2, $3, $4) RETURNING *',
      [nome, email, telefone, endereco]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('❌ Erro ao adicionar paciente:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Remover um paciente
const removerPaciente = async (req, res) => {
  const { id } = req.params;
  console.log(`🗑️ Requisição: Remover paciente com ID=${id}`);

  try {
    const result = await client.query('DELETE FROM pacientes WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      console.log('❌ Paciente não encontrado.');
      return res.status(404).json({ message: 'Paciente não encontrado.' });
    }
    res.status(200).json({ message: 'Paciente removido com sucesso.', paciente: result.rows[0] });
  } catch (err) {
    console.error('❌ Erro ao remover paciente:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

module.exports = {
  listarPacientes,
  adicionarPaciente,
  removerPaciente,
};



// backend\controllers\pedidoController.js

const client = require('../config/db'); // Conexão com o banco de dados

// Listar todos os pedidos
const listarPedidos = async (req, res) => {
  console.log('📋 Requisição: Listar todos os pedidos.');
  try {
    const result = await client.query('SELECT * FROM pedidos');
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('❌ Erro ao listar pedidos:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

const listarPedidosEmAberto = async (req, res) => {
  console.log("📋 Requisição: Listar apenas pedidos em aberto.");
  try {
    const result = await client.query(
      "SELECT * FROM pedidos WHERE status NOT IN ('Concluído', 'Cancelado') ORDER BY data_pagamento DESC"
    );
    res.status(200).json(result.rows);
  } catch (err) {
    console.error("❌ Erro ao listar pedidos em aberto:", err);
    res.status(500).json({ message: "Erro interno no servidor." });
  }
};


// Adicionar um novo pedido
const adicionarPedido = async (req, res) => {
  const { paciente_id, descricao, status } = req.body;
  console.log('➕ Requisição: Adicionar pedido.', req.body);

  try {
    const result = await client.query(
      'INSERT INTO pedidos (paciente_id, descricao, status) VALUES ($1, $2, $3) RETURNING *',
      [paciente_id, descricao, status]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('❌ Erro ao adicionar pedido:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Remover um pedido
const removerPedido = async (req, res) => {
  const { id } = req.params;
  console.log(`🗑️ Requisição: Remover pedido com ID=${id}`);

  try {
    const result = await client.query('DELETE FROM pedidos WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      console.log('❌ Pedido não encontrado.');
      return res.status(404).json({ message: 'Pedido não encontrado.' });
    }
    res.status(200).json({ message: 'Pedido removido com sucesso.', pedido: result.rows[0] });
  } catch (err) {
    console.error('❌ Erro ao remover pedido:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

module.exports = {
  listarPedidos,
  listarPedidosEmAberto,  
  adicionarPedido,
  removerPedido,
};




// backend\middlewares\auth.js

const jwt = require("jsonwebtoken");
const SECRET_KEY = process.env.SECRET_KEY;

// 🔹 Middleware para autenticar qualquer usuário logado
const autenticarToken = (req, res, next) => {
    const token = req.headers["authorization"];
    if (!token) {
        return res.status(403).json({ message: "Acesso negado. Token ausente." });
    }

    try {
        const decoded = jwt.verify(token.replace("Bearer ", ""), SECRET_KEY);
        req.usuario = decoded;
        next();
    } catch (err) {
        return res.status(401).json({ message: "Token inválido." });
    }
};

// 🔹 Middleware para verificar se o usuário é ADMIN
const autenticarAdmin = (req, res, next) => {
    if (!req.usuario || !req.usuario.is_admin) {
        return res.status(403).json({ message: "Acesso negado. Apenas administradores podem realizar esta ação." });
    }
    next();
};

// 🔹 Middleware para verificar se o usuário é um dentista autenticado
const autenticarDentista = (req, res, next) => {
    if (!req.usuario) {
        return res.status(403).json({ message: "Acesso negado. Apenas dentistas autenticados podem realizar esta ação." });
    }
    next();
};

module.exports = { autenticarToken, autenticarAdmin, autenticarDentista };



// backend\middlewares\errorHandler.js

// src/middlewares/errorHandler.js
export const errorHandler = (err, req, res, next) => {
  console.error(`❌ Erro no servidor: ${err.message}`);
  res.status(err.status || 500).json({
    message: err.message || 'Erro interno no servidor.',
    stack: process.env.NODE_ENV === 'production' ? null : err.stack, // Esconde stack em produção
  });
};



// backend\middlewares\validate.js

// src/middlewares/validate.js
import { check, validationResult } from 'express-validator';

// Validação para adicionar ou atualizar dentistas
export const validateDentista = [
  check('nome').notEmpty().withMessage('O nome é obrigatório'),
  check('email').isEmail().withMessage('O email precisa ser válido'),
  check('telefone').notEmpty().withMessage('O telefone é obrigatório'),
  check('senha').notEmpty().withMessage('A senha é obrigatória'),
];

// Validação para adicionar ou atualizar pacientes
export const validatePaciente = [
  check('nome').notEmpty().withMessage('O nome é obrigatório'),
  check('email').isEmail().withMessage('O email precisa ser válido'),
  check('telefone').notEmpty().withMessage('O telefone é obrigatório'),
  check('dentista_id').isInt().withMessage('O ID do dentista deve ser um número válido'),
];

// Validação para adicionar ou atualizar pedidos
export const validatePedido = [
  check('paciente_id').isInt().withMessage('O ID do paciente deve ser um número válido'),
  check('pedido_details').notEmpty().withMessage('Os detalhes do pedido são obrigatórios'),
];

// Middleware para verificar erros de validação
export const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};



// backend\routes\dashboardAdmin.js

const express = require("express");
const { 
    listarDentistasDashboard,
    obterDetalhesDentista,
    listarPedidosDashboard,
    alterarStatusPedido,
    obterEstatisticasAdmin,
    alternarAdmin,
    alternarCredenciado
} = require("../controllers/dashboardAdminController");

const { autenticarToken, autenticarAdmin } = require("../middlewares/auth");

const router = express.Router();

// 📌 1️⃣ **TABELA PRINCIPAL** - Lista geral de dentistas com pedidos vinculados
router.get("/dentistas/dashboard", autenticarToken, autenticarAdmin, listarDentistasDashboard);  

// 📌 2️⃣ **DETALHES** - Exibe informações detalhadas de um dentista específico e possibilita toggles
router.get("/dentistas/:id", autenticarToken, autenticarAdmin, obterDetalhesDentista);

// ✅ **Alterações de status (Toggles)**
router.patch("/dentistas/:id/toggle-is_admin", autenticarToken, autenticarAdmin, alternarAdmin);  
router.patch("/dentistas/:id/toggle-is_verified", autenticarToken, autenticarAdmin, alternarCredenciado);

// 📌 3️⃣ **TABELA DE PEDIDOS** - Exibe todos os pedidos cadastrados
router.get("/pedidos/dashboard", autenticarToken, autenticarAdmin, listarPedidosDashboard);
// 📌 **Rota para alterar status de um pedido**
router.patch("/pedidos/:id/status", autenticarToken, autenticarAdmin, alterarStatusPedido);


// 📌 4️⃣ **ESTATÍSTICAS** - Dados agregados do sistema para visão geral do Admin
router.get("/estatisticas", autenticarToken, autenticarAdmin, obterEstatisticasAdmin);

module.exports = router;



// backend\routes\dashboardDentista.js

// routes/dashboardDentistaRoutes.js
const express = require("express");
const { 
  listarPacientesDashboard,
  listarPedidosDentista,
  obterDetalhesPaciente
} = require("../controllers/dashboardDentistaController");
const { autenticarToken, autenticarDentista } = require("../middlewares/auth");

const router = express.Router();

// 📌 1️⃣ Listar pacientes vinculados ao dentista logado
router.get("/pacientes/dashboard", autenticarToken, autenticarDentista, listarPacientesDashboard);

// 📌 2️⃣ Listar pedidos do dentista logado
router.get("/pedidos/dashboard", autenticarToken, autenticarDentista, listarPedidosDentista);

// 📌 3️⃣ Obter detalhes de um paciente específico (do dentista logado)
router.get("/pacientes/:id", autenticarToken, autenticarDentista, obterDetalhesPaciente);

module.exports = router;



// backend\routes\dentistas.js

const express = require("express");
const {
    listarDentistas,
    visualizarDentista,
    adicionarDentista,
    alterarDentista,
    removerDentista,
    loginDentista
} = require("../controllers/dentistaController");

const { autenticarToken, autenticarAdmin, autenticarDentista } = require("../middlewares/auth");

const router = express.Router();

// 🔑 Login e Cadastro (Acesso público)
router.post("/login", loginDentista);  // Qualquer um pode logar
router.post("/", adicionarDentista);   // Qualquer um pode se cadastrar

// 📋 Rotas de dentistas (Protegidas)
router.get("/", autenticarToken, autenticarAdmin, listarDentistas);  // Apenas ADMIN pode listar todos
router.get("/:id", autenticarToken, visualizarDentista);  // Dentistas autenticados podem ver seu próprio perfil
router.put("/:id", autenticarToken, autenticarDentista, alterarDentista);  // Dentista pode alterar seu próprio cadastro
router.delete("/:id", autenticarToken, autenticarAdmin, removerDentista);  // Apenas ADMIN pode remover dentistas

module.exports = router;



// backend\routes\filtros.js

const express = require("express");
const { 
    filtrarPorNome,
    filtrarPorSexo,
    ordenarPorNome,
    ordenarPorPedidos,
    filtrarPorStatus
} = require("../controllers/filtrosController");
const { autenticarToken } = require("../middlewares/auth");

const router = express.Router();

// 📌 Rotas de Filtros (todas protegidas por autenticação)
router.get("/nome", autenticarToken, filtrarPorNome);
router.get("/sexo", autenticarToken, filtrarPorSexo);
router.get("/ordenacao", autenticarToken, ordenarPorNome);
router.get("/pedidos", autenticarToken, ordenarPorPedidos);
router.get("/status", autenticarToken, filtrarPorStatus);

module.exports = router;



// backend\routes\pacientes.js

const express = require('express');
const {
  listarPacientes,
  adicionarPaciente,
  removerPaciente,
} = require('../controllers/pacienteController');

const router = express.Router();

// Rotas de pacientes
router.get('/', listarPacientes);
router.post('/', adicionarPaciente);
router.delete('/:id', removerPaciente);

module.exports = router;



// backend\routes\pedidos.js

const express = require('express');
const {
  listarPedidos,
  listarPedidosEmAberto,
  adicionarPedido,
  removerPedido,
} = require('../controllers/pedidoController');

const router = express.Router();

// Rotas de pedidos
router.get('/', listarPedidos);
router.get('/abertos', listarPedidosEmAberto);
router.post('/', adicionarPedido);
router.delete('/:id', removerPedido);

module.exports = router;



// backend\server.js

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

// Carregar variáveis de ambiente
dotenv.config();


const dentistasRoutes = require('./routes/dentistas');
const pacientesRoutes = require('./routes/pacientes');
const pedidosRoutes = require('./routes/pedidos');
//novas rotas
const dashboardAdminRoutes = require("./routes/dashboardAdmin");
const dashboardDentistaRoutes = require("./routes/dashboardDentista");

const filtrosRoutes = require("./routes/filtros");


const app = express();

// Configurações básicas
app.use(cors({ origin: '*' }));
app.use(express.json());

// Rotas
app.use('/dentistas', dentistasRoutes);
app.use('/pacientes', pacientesRoutes);
app.use('/pedidos', pedidosRoutes);
// Rotas do Admin Dashboard
app.use("/admin", dashboardAdminRoutes);


app.use("/dentista", dashboardDentistaRoutes);
app.use("/dentista/filtros", filtrosRoutes);  // 🔹 Agora com namespace separado



// Inicialização do servidor
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`✅ 777 Servidor rodando na porta ${PORT}`);
});



