// ..\frontend\painel\dashboard\admin\admin.html

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
/* HEADER - Cabe√ßalho Fixo */
header {
    width: 100%;
    background: linear-gradient(to right, #0056b3, #007BFF);
    color: white;
    padding: 15px 20px;
    text-align: center;
    font-size: 20px;
    font-weight: bold;
    position: fixed;
    top: 0;
    left: 0;
    height: 60px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    z-index: 1000;
}

/* Ajuste para evitar que o conte√∫do fique escondido abaixo do header */
body {
    font-family: Arial, sans-serif;
    background-color: #eef2f7;
    margin: 0;
    padding-top: 70px; /* Garante espa√ßo abaixo do header */
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Ajuste do conte√∫do principal */
main {
    width: 90%;
    max-width: 1200px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    justify-content: center;
    align-items: center;
}

/* Estiliza√ß√£o para garantir que as tabelas fiquem vis√≠veis */
.container {
    background: white;
    width: 100%;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.15);
    min-height: 180px;
    overflow-x: auto; /* Permite rolagem horizontal para tabelas muito largas */
}

/* Responsividade: Ajusta a largura para telas menores */
@media (max-width: 768px) {
    main {
        width: 95%;
    }
    .container {
        min-height: 150px;
    }
}

/* Estiliza√ß√£o das Tabelas */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
    background: white;
}

th, td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: center;
}

th {
    background: #007BFF;
    color: white;
}

/* Permite que tabelas muito grandes rolem sem esconder conte√∫do */
.tabela-container {
    max-height: 500px; /* Altura m√°xima ajust√°vel */
    overflow-y: auto; /* Rolagem vertical se necess√°rio */
}


    </style>
</head>
<body>


    <main>
        <!-- Pedidos em Aberto -->
        <section id="pedidos-container" class="container">
            <h2>üìã Pedidos em Aberto</h2>
            <div id="pedidos-content">Carregando pedidos...</div>
        </section>

        <!-- Tabela Principal -->
        <section id="tabela-container" class="container">
            <h2>üìä Tabela de Dados</h2>
            <div id="tabela-content">Carregando...</div>
        </section>

        <!-- Detalhes -->
        <section id="detalhes-container" class="container">
            <h2>üîç Detalhes</h2>
            <div id="detalhes-content">Selecione um pedido...</div>
        </section>

        <!-- Estat√≠sticas -->
        <section id="estatisticas-container" class="container">
            <h2>üìà Estat√≠sticas</h2>
            <div id="estatisticas-content">Carregando estat√≠sticas...</div>
        </section>
    </main>

    <script src="admin.js"></script>
</body>
</html>



// ..\frontend\painel\dashboard\admin\admin.js

const pedidosContainer = document.getElementById("pedidos-container");
const tabelaContainer = document.getElementById("tabela-container");
const detalhesContainer = document.getElementById("detalhes-container");
const estatisticasContainer = document.getElementById("estatisticas-container");

// üî• Fun√ß√£o para carregar m√≥dulos dinamicamente
async function carregarModulo(container, htmlPath, cssPath, scriptPath, nome, callback) {
    console.log(`üìÇ Carregando m√≥dulo: ${nome}`);

    try {
        // üî• Carrega o HTML do m√≥dulo
        const response = await fetch(htmlPath);
        if (!response.ok) throw new Error(`M√≥dulo ${nome} n√£o encontrado!`);

        const moduloHtml = await response.text();
        container.innerHTML = moduloHtml;
        console.log(`‚úÖ HTML do m√≥dulo ${nome} carregado!`);

        // üî• Carrega o CSS do m√≥dulo (se ainda n√£o estiver carregado)
        if (!document.querySelector(`link[href='${cssPath}']`)) {
            const css = document.createElement("link");
            css.rel = "stylesheet";
            css.href = cssPath;
            document.head.appendChild(css);
            console.log(`üé® CSS do m√≥dulo ${nome} carregado!`);
        }

        // üî• Remove qualquer script antigo do mesmo m√≥dulo (para evitar duplica√ß√£o)
        const existingScript = document.querySelector(`script[src='${scriptPath}']`);
        if (existingScript) {
            existingScript.remove();
            console.log(`üóë Script antigo do m√≥dulo ${nome} removido.`);
        }

        // üî• Carrega o JS do m√≥dulo DINAMICAMENTE e executa o callback ap√≥s o carregamento
        const script = document.createElement("script");
        script.src = scriptPath;
        script.type = "module";  // ‚úÖ Adicionando suporte a m√≥dulos
        script.defer = true;

        script.onload = () => {
            console.log(`‚úÖ JS do m√≥dulo ${nome} carregado!`);
            if (typeof callback === "function") {
                console.log(`üöÄ Executando callback para ${nome}...`);
                callback();
            }
        };

        script.onerror = () => console.error(`‚ùå Erro ao carregar ${scriptPath}!`);

        document.body.appendChild(script);

    } catch (error) {
        console.error(`‚ùå Erro ao carregar ${nome}:`, error);
        container.innerHTML = `<p style="color: red;">Erro ao carregar ${nome}.</p>`;
    }
}

// üî• Carregando m√≥dulos dinamicamente

// üî• Primeiro, carregamos os filtros da tabela
const isPainel = window.location.href.includes("painel");

const caminhoFiltros = isPainel
    ? "dashboard/admin/modules/tabela_admin_filtros.js" // Caminho no painel
    : "modules/tabela_admin_filtros.js"; // Caminho normal fora do painel


///
    // üî• Carregando Pedidos
carregarModulo(
    pedidosContainer, 
    "dashboard/admin/modules/pedidos_admin.html", 
    "dashboard/admin/modules/pedidos_admin.css", 
    "dashboard/admin/modules/pedidos_admin.js", 
    "pedidos_admin",
    () => {
        console.log("üöÄ Inicializando funcionalidades de pedidos...");
    }
);
// üî• carregando tabela

carregarModulo(
    tabelaContainer, 
    "dashboard/admin/modules/tabela_admin.html", 
    "dashboard/admin/modules/tabela_admin.css", 
    caminhoFiltros, // Agora usa o caminho correto dependendo do contexto
    "tabela_admin_filtros",
    () => {
        console.log("üöÄ Filtros da tabela carregados!");
        
        carregarModulo(
            tabelaContainer, 
            "dashboard/admin/modules/tabela_admin.html", 
            "dashboard/admin/modules/tabela_admin.css", 
            "dashboard/admin/modules/tabela_admin.js", 
            "tabela_admin",
            () => {
                console.log("üöÄ Inicializando funcionalidades da tabela...");

            }
        );
    }
);


// üî• Carregando Detalhes
carregarModulo(
    detalhesContainer, 
    "dashboard/admin/modules/detalhes_admin.html", 
    "dashboard/admin/modules/detalhes_admin.css", 
    "dashboard/admin/modules/detalhes_admin.js", 
    "detalhes_admin",
    () => {
        console.log("üöÄ Inicializando funcionalidades de detalhes...");
        
        if (typeof carregarDentistasParaSelecao === "function") {
            carregarDentistasParaSelecao();
        } else {
            console.error("‚ùå Fun√ß√£o carregarDentistasParaSelecao n√£o encontrada!");
        }

        const botaoCarregar = document.getElementById("carregar-detalhes");
        if (botaoCarregar) {
            botaoCarregar.addEventListener("click", () => {
                if (typeof carregarDetalhesDentista === "function") {
                    carregarDetalhesDentista();
                } else {
                    console.error("‚ùå Fun√ß√£o carregarDetalhesDentista n√£o encontrada!");
                }
            });
            console.log("‚úÖ Evento de clique vinculado ao bot√£o 'Carregar Detalhes'");
        } else {
            console.error("‚ùå Bot√£o 'Carregar Detalhes' n√£o encontrado!");
        }
    }
);

// üî• Carregando Estat√≠sticas
carregarModulo(
    estatisticasContainer, 
    "dashboard/admin/modules/estatisticas_admin.html", 
    "dashboard/admin/modules/estatisticas_admin.css", 
    "dashboard/admin/modules/estatisticas_admin.js", 
    "estatisticas_admin",
    () => {
        console.log("üöÄ Inicializando funcionalidades de estat√≠sticas...");
    }
);



// ..\frontend\painel\painel.css




// ..\frontend\painel\painel.html

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel - Amazon Align</title>
    <link rel="stylesheet" href="painel.css">
    <link rel="stylesheet" href="login/login.css"> <!-- Estilo do login -->
    <link rel="icon" href="data:;base64,iVBORw0KGgo="> 
</head>
<body>
    <header>
        <h1 id="titulo">Bem-vindo!</h1>
    </header>

<main id="main-content">

    </section>
    <section id="login-container" class="container">
        <h2>Login 1</h2>
        <form id="login-form">
            <input type="email" id="email" placeholder="E-mail">
            <input type="password" id="senha" placeholder="Senha">
            <button type="submit">Entrar</button>
            <p id="error-message" class="error-message" style="display: none;">E-mail ou senha inv√°lidos.</p>
        </form>
    </section>

    <!-- Dashboard (inicialmente oculto) -->
    <section id="dashboard-container" class="container" >
        <h2>Dashboard 1</h2>
        <p> painel! 1</p>
    </section>
</main>

<script src="login/auth.js"></script>

<script>
        // Fun√ß√£o para carregar o login real dinamicamente
 async function carregarLogin() {
    console.log("üîÑ Carregando login...");

    const response = await fetch("login/login.html");
    const loginHtml = await response.text();

    // Obt√©m o login-container para substituir apenas ele
    const loginContainer = document.getElementById("login-container");

    if (!loginContainer) {
        console.error("‚ùå login-container n√£o encontrado!");
        return;
    }

    loginContainer.innerHTML = loginHtml; // üî• Substitui apenas o login-container

    console.log("‚úÖ Login carregado com sucesso!");

    // üî• Agora que o login foi carregado, adicionamos os scripts necess√°rios
    const authScript = document.createElement("script");
    authScript.src = "login/auth.js";
    document.body.appendChild(authScript);

    const loginScript = document.createElement("script");
    loginScript.src = "login/login.js";
    document.body.appendChild(loginScript);
}

// üî• Carregar login ao iniciar a p√°gina
carregarLogin();

    </script>

    <script src="painel.js"></script>
</html>



// ..\frontend\painel\painel.js

    console.log("[painel] üîÑ Iniciando login.js...");
