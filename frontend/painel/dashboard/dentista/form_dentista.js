console.log("[Form Dentista] üî• Script carregado corretamente!");

// Fun√ß√£o para inicializar a se√ß√£o de formul√°rios
function inicializarFormularios() {
    console.log("üìå Inicializando sistema de formul√°rios...");
    inicializarBotoesFormulario();
    inicializarBotoesExtras();
}

// Fun√ß√£o para criar e adicionar eventos aos bot√µes de formul√°rio principais
function inicializarBotoesFormulario() {
    console.log("üìå Criando bot√µes e adicionando eventos...");

    let btnCadastroPaciente = document.getElementById("btn-cadastro-paciente");
    let btnCadastroPedido = document.getElementById("btn-cadastro-pedido");

    if (!btnCadastroPaciente || !btnCadastroPedido) {
        console.error("‚ùå Bot√µes principais n√£o encontrados no DOM! Verifique se o HTML cont√©m os elementos corretamente.");
        return;
    }

    btnCadastroPaciente.addEventListener("click", () => chamarFormulario("cadastro-paciente"));
    btnCadastroPedido.addEventListener("click", () => chamarFormulario("cadastro-pedido"));

    console.log("‚úÖ Eventos adicionados aos bot√µes principais de formul√°rio!");
}

// Fun√ß√£o para adicionar eventos a outros bot√µes do sistema
function inicializarBotoesExtras() {
    console.log("üìå Procurando bot√µes extras para carregar formul√°rios...");

    let botoesExtras = document.querySelectorAll("[data-form]");
    botoesExtras.forEach(botao => {
        botao.addEventListener("click", () => {
            let tipo = botao.getAttribute("data-form");
            chamarFormulario(tipo);
        });
    });

    console.log("‚úÖ Eventos adicionados aos bot√µes extras de formul√°rio!");
}

// Fun√ß√£o que decide qual formul√°rio carregar e faz scroll
function chamarFormulario(tipo) {
    console.log(`üîÑ Chamando formul√°rio: ${tipo}`);

    const formContainer = document.getElementById("form-active");

    // Verifica se j√° h√° um formul√°rio carregado
    if (formContainer.innerHTML.trim() !== "") {
        console.log("üîÑ Ocultando formul√°rio anterior...");
        formContainer.innerHTML = ""; // Remove o conte√∫do anterior
    }

    if (tipo === "cadastro-paciente") {
        carregarCadastroPaciente();
    } else if (tipo === "cadastro-pedido") {
        carregarCadastroPedido();
    } else {
        console.error("‚ùå Tipo de formul√°rio inv√°lido:", tipo);
        return;
    }

    // Scroll suave para a se√ß√£o do formul√°rio
    setTimeout(() => {
        formContainer.scrollIntoView({ behavior: "smooth" });
        console.log("üìú Scroll realizado at√© o formul√°rio!");
    }, 300);
}

// üîπ **Agora carregamos o HTML + Script de Cadastro de Paciente**
function carregarCadastroPaciente() {
    console.log("üîÑ Carregando formul√°rio de Cadastro de Paciente...");
    carregarFormulario(
        "dashboard/dentista/form_dentista/cadastro_paciente.html",
        "dashboard/dentista/form_dentista/cadastro_paciente.js"
    );
}

// üîπ **Agora carregamos o HTML + Script de Cadastro de Pedido**
function carregarCadastroPedido() {
    console.log("üîÑ Carregando formul√°rios de Cadastro de Pedido e Ficha T√©cnica...");

    let caminhoPedido = "dashboard/dentista/form_dentista/cadastro_pedido.html";
    let caminhoFicha = "dashboard/dentista/form_dentista/ficha_tecnica.html";

    Promise.all([fetch(caminhoPedido), fetch(caminhoFicha)])
        .then(responses => Promise.all(responses.map(response => {
            if (!response.ok) {
                throw new Error(`Erro ao carregar um dos formul√°rios: ${response.statusText}`);
            }
            return response.text();
        })))
        .then(([pedidoHtml, fichaHtml]) => {
            let formContainer = document.getElementById("form-active");
            formContainer.innerHTML = pedidoHtml + "<hr>" + fichaHtml; // Junta os dois formul√°rios
            formContainer.style.display = "block";

            console.log("‚úÖ Formul√°rios de Pedido e Ficha T√©cnica carregados com sucesso!");

            // Agora carregamos os scripts espec√≠ficos
            carregarScriptDinamico("dashboard/dentista/form_dentista/cadastro_pedido.js");
            carregarScriptDinamico("dashboard/dentista/form_dentista/ficha_tecnica.js");
        })
        .catch(error => console.error("‚ùå Erro ao carregar os formul√°rios:", error));
}

// Fun√ß√£o gen√©rica para carregar formul√°rios e garantir que o script correto seja carregado
function carregarFormulario(caminho, scriptPath = null) {
    console.log(`üì• Carregando HTML de: ${caminho}`);

    fetch(caminho)
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao carregar o arquivo: " + response.statusText);
            }
            return response.text();
        })
        .then(html => {
            let formContainer = document.getElementById("form-active");

            formContainer.innerHTML = html; // Atualiza o conte√∫do do formul√°rio
            formContainer.style.display = "block";
            console.log("‚úÖ Formul√°rio carregado com sucesso!");

            // Se houver um script associado, carreg√°-lo dinamicamente
            if (scriptPath) {
                setTimeout(() => {
                    carregarScriptDinamico(scriptPath);
                }, 300);
            }
        })
        .catch(error => console.error("‚ùå Erro ao carregar o formul√°rio:", error));
}

// Fun√ß√£o para carregar um script dinamicamente
function carregarScriptDinamico(scriptPath) {
    console.log(`üìú Tentando carregar script: ${scriptPath}`);

    // Verifica se o script j√° foi carregado
    if (document.querySelector(`script[src="${scriptPath}"]`)) {
        console.warn(`‚ö†Ô∏è Script ${scriptPath} j√° foi carregado! Ignorando.`);
        return;
    }

    let script = document.createElement("script");
    script.src = scriptPath;
    script.type = "module";
    script.onload = () => console.log(`‚úÖ Script carregado: ${scriptPath}`);
    script.onerror = () => console.error(`‚ùå Erro ao carregar script: ${scriptPath}`);

    document.body.appendChild(script);
}


// Executar a inicializa√ß√£o dos formul√°rios
inicializarFormularios();


// ---------------------------------
// üìå CADASTRO DE PACIENTE
// ---------------------------------

console.log("[cadastro_paciente] üî•üî•üî•üî• Iniciando");

function inicializarCadastroPaciente() {
    console.log("üìå Inicializando Cadastro de Paciente...");

    const form = document.querySelector("#form-cadastro-paciente");
    if (!form) {
        console.error("‚ùå Formul√°rio de cadastro de paciente n√£o encontrado!");
        return;
    }

    // Remove qualquer evento de submit anterior para evitar duplica√ß√£o
    form.removeEventListener("submit", handleCadastroPaciente);
    form.addEventListener("submit", handleCadastroPaciente);

    // Confere se o dentista_id est√° salvo no localStorage
    const dentistaId = localStorage.getItem("dentista_id");
    if (dentistaId) {
        document.getElementById("dentista_id").value = dentistaId;
        console.log(`ü¶∑ Dentista ID encontrado: ${dentistaId}`);
    } else {
        console.warn("‚ö†Ô∏è Nenhum dentista_id encontrado no localStorage!");
    }
}

async function handleCadastroPaciente(event) {
    event.preventDefault(); // Evita o reload da p√°gina

    const form = event.target;
    const formData = new FormData(form);
    const pacienteData = Object.fromEntries(formData.entries()); // Converte FormData para objeto

    // Remove campos vazios para evitar problemas no backend
    Object.keys(pacienteData).forEach(key => {
        if (pacienteData[key] === "") {
            delete pacienteData[key];
        }
    });

    console.log("üì§ Enviando dados do paciente:", JSON.stringify(pacienteData, null, 2));

    try {
        const response = await fetch("http://localhost:5000/pacientes", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${localStorage.getItem("token")}` // Certifique-se de que o usu√°rio est√° autenticado
            },
            body: JSON.stringify(pacienteData)
        });

        console.log(`üì° Status da resposta: ${response.status}`);

        const result = await response.json();
        console.log("üì© Resposta do servidor:", result);

        if (response.ok) {
            alert("‚úÖ Paciente cadastrado com sucesso!");
            form.reset(); // Limpa o formul√°rio ap√≥s sucesso
        } else {
            alert(`‚ùå Erro: ${result.message}`);
        }
    } catch (error) {
        console.error("‚ùå Erro ao cadastrar paciente:", error);
        alert("Erro ao cadastrar paciente. Verifique sua conex√£o.");
    }
}
